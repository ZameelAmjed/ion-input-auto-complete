{"version":3,"file":"input-auto-complete-component.js","sourceRoot":"","sources":["../../src/components/input-auto-complete-component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, forwardRef, AfterViewInit, OnChanges, ViewEncapsulation, ViewChild, ElementRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\r\n\r\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => InputAutoCompleteComponent),\r\n    multi: true\r\n};\r\nconst css = `.text-first-capital:first-letter {text-transform:uppercase;}\r\n.autofill-field {\r\n    position: absolute;\r\n    margin: 0px;\r\n    z-index: 666;\r\n    background-color: #ffffff;\r\n    width: 98%;\r\n    padding: 0px;\r\n    -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\r\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\r\n}\r\n.autofill-field ul{\r\n    list-style: none;\r\n    margin: 0px;\r\n    padding: 0px;\r\n} .autofill-field ul li{\r\n      padding: 15px;\r\n      border-bottom: 1px solid #c1c1c1;\r\n  }\r\n.autofill-field ul li:hover{\r\n    background-color: #f4f4f4;\r\n    cursor: pointer;\r\n}\r\n.hidefield{\r\n    display: none;\r\n}`;\r\n\r\n@Component({\r\n    selector: 'input-auto-complete',\r\n    template:'<ion-item>\\n' +\r\n    '<ion-label color=\"primary\"  *ngIf=\"labeltype === floating\" floating>{{label}}</ion-label>\\n' +\r\n    '<ion-label color=\"primary\"  *ngIf=\"labeltype === fixed\" fixed>{{label}}</ion-label>\\n' +\r\n    '<ion-label color=\"primary\"  *ngIf=\"labeltype === stacked\" fixed>{{label}}</ion-label>\\n' +\r\n    '<ion-input \\n' +\r\n    '    #input\\n' +\r\n    '    (keyup)=\"autofillCategory(input.value)\"\\n' +\r\n    '    (blur)=\"onChange($event, input.value)\" >\\n' +\r\n    '</ion-input>\\n' +\r\n    '</ion-item>\\n' +\r\n    '<div [ngClass]=\"{\\'hidefield\\':focus, \\'autofill-field\\':true }\"><ul>\\n' +\r\n    '<li *ngFor=\"let cat of listarray\" (tap)=\"selectCat(cat);$event.srcEvent.stopPropagation()\">{{cat}}</li>\\n' +\r\n    '</ul>\\n' +\r\n    '</div>',\r\n    styles:[css],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\r\n})\r\n\r\nexport class InputAutoCompleteComponent implements ControlValueAccessor, AfterViewInit, OnChanges {\r\n\r\n     //current form control input. helpful in validating and accessing form control\r\n    @Input() ctrl:FormControl = new FormControl();\r\n\r\n    // get reference to the input element\r\n    @ViewChild('input')  inputRef:ElementRef;\r\n    // label name\r\n    @Input() label: string;\r\n    //suggestions refered from controller\r\n    @Input() listprovider: any; \r\n    //suggestions refered from controller\r\n    @Input() labeltype: string = 'floating';\r\n\r\n    @Input() control: FormControl;\r\n    focus: boolean;\r\n    public listarray;\r\n    floating : string = 'floating';\r\n    fixed : string = 'fixed';\r\n    stacked : string = 'stacked';\r\n\r\n    constructor() {\r\n        this.listarray = [];\r\n        this.focus = false;\r\n        if(this.labeltype == \"\"){\r\n            this.labeltype = \"floating\";\r\n        }\r\n    }\r\n\r\n    ngOnChanges(){\r\n    }\r\n\r\n    //Lifecycle hook.\r\n    ngAfterViewInit(){\r\n        // RESET the custom input form control UI when the form control is RESET\r\n        this.ctrl.valueChanges.subscribe(\r\n            () => {\r\n                // check condition if the form control is RESET\r\n                if (this.ctrl.value == \"\" || this.ctrl.value == null || this.ctrl.value == undefined) {\r\n                    try{\r\n                        this.innerValue = \"\";\r\n                        this.inputRef.nativeElement.value = \"\";\r\n                    }catch(e){\r\n                        console.log(e.message);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    //The internal data model for form control value access\r\n    private innerValue: any = '';\r\n\r\n    // event fired when input value is changed . later propagated up to the form control using the custom value accessor interface\r\n    onChange(e:Event, value:any, status){\r\n        this.focus = status;\r\n        //set changed value\r\n        this.innerValue = value;\r\n        // propagate value into form control using control value accessor interface\r\n        this.propagateChange(this.innerValue);\r\n    }\r\n\r\n\r\n    //get accessor\r\n    get value(): any {\r\n        return this.innerValue;\r\n    };\r\n\r\n    //set accessor including call the onchange callback\r\n    set value(v: any) {\r\n        if (v !== this.innerValue) {\r\n            this.innerValue = v;\r\n        }\r\n    }\r\n\r\n    //propagate changes into the custom form control\r\n    propagateChange = (_: any) => { }\r\n\r\n    //From ControlValueAccessor interface\r\n    writeValue(value: any) {\r\n        this.innerValue = value;\r\n    }\r\n\r\n    //From ControlValueAccessor interface\r\n    registerOnChange(fn: any) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    //From ControlValueAccessor interface\r\n    registerOnTouched(fn: any) {\r\n    }\r\n\r\n    autofillCategory(key){\r\n        if (this.listprovider == \"\" || this.listprovider == null || this.listprovider == undefined){\r\n            this.listprovider = null;\r\n        }else{\r\n            this.listprovider.getResults(key).subscribe(result=>{\r\n                this.listarray = result;\r\n            });\r\n        }\r\n    }\r\n\r\n    selectCat(item){\r\n        this.listarray = [];\r\n        this.ctrl.setValue(item);\r\n        this.propagateChange(item);\r\n    }\r\n}"]}